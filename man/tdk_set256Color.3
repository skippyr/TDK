.TH tdk_set256Color 3 ${VERSION}

.SH NAME

.PP
tdk_set256Color, tdk_setHexColor, tdk_setRGBColor - set a terminal color

.SH LIBRARY

.PP
tdk (\fIlibtdk\fR, \fI-tdk\fR)

.SH SYNOPSIS

.nf
\fB#include <tdk.h>

void tdk_set256Color(int \fIcolor\fB, int \fIlayer\fB);
void tdk_setHexColor(int \fIcolor\fB, int \fIlayer\fB);
void tdk_setRGBColor(struct tdk_RGB \fIcolor\fB, int \fIlayer\fB);\fR
.fi

.SH DESCRIPTION

.PP
Set a color of a specific format into a terminal \fIlayer\fR:

.TP
.IP \\[bu]
The function \fBtdk_set256Color\fR expects a \fIcolor\fR from the xterm 256 colors palette, which can be any value in range from 0 to 255 or a custom color value defined by the library.

This palette offers the best compatibility with the current terminal theme.

This is the only color function that can reset a color.

.TP
.IP \\[bu]
The function \fBtdk_setHexColor\fR expects a HEX \fIcolor\fR, which can be any value in range from 0x0 to 0xffffff.

This color format requires the terminal to have truecolor support.

.TP
.IP \\[bu]
The function \fBtdk_setRGBColor\fR expects an RGB \fIcolor\fR.

This color format requires the terminal to have truecolor support.

.PP
The \fItdk_RGB\fR struct is composed by the following fields:

.nf
struct tdk_RGB
{
    unsigned char red;
    unsigned char green;
    unsigned char blue;
};
.fi

.TP
.IP \\[bu]
\fBred: \fR the red component of the color.

.TP
.IP \\[bu]
\fBgreen: \fR the green component of the color.

.TP
.IP \\[bu]
\fBblue: \fR the blue component of the color.

.PP
Each component may be any value in range from 0 to 255.

.SH LAYERS

.PP
These are custom layer values defined by the library that may be used as the \fIlayer\fR parameter:

.TP
.B tdk_Layer_Foreground
The foreground layer.

.TP
.B tdk_Layer_Background
The background layer.

.SH COLORS

.PP
These are custom color values defined by the library that may be used as the \fIcolor\fR parameter of the function \fBtdk_set256Color\fR.

.PP
They refer to the first 16 values of the palette it uses plus one color used for resets and they are mapped to colors from the current terminal theme:

.TP
.B tdk_Color_Default
The default color. Used for resets.

.TP
.B tdk_Color_Red, tdk_Color_LightRed
The regular and light variants of the red color.

.TP
.B tdk_Color_Green, tdk_Color_LightGreen
The regular and light variants of the green color.

.TP
.B tdk_Color_Yellow, tdk_Color_LightYellow
The regular and light variants of the yellow color.

.TP
.B tdk_Color_Blue, tdk_Color_LightBlue
The regular and light variants of the blue color.

.TP
.B tdk_Color_Magenta, tdk_Color_LightMagenta
The regular and light variants of the magenta color.

.TP
.B tdk_Color_Cyan, tdk_Color_LightCyan
The regular and light variants of the cyan color.

.TP
.B tdk_Color_White, tdk_Color_LightWhite
The regular and light variants of the white color.

.SH EXAMPLES

.nf
#include <stdio.h>

#include <tdk.h>

int main(void)
{
    const char *message = "Here Be Dragons!";
    tdk_set256Color(tdk_Color_Red, tdk_Layer_Foreground);
    puts(message);
    tdk_set256Color(tdk_Color_Yellow, tdk_Layer_Foreground);
    puts(message);
    tdk_set256Color(tdk_Color_Green, tdk_Layer_Foreground);
    puts(message);
    tdk_set256Color(tdk_Color_Default, tdk_Layer_Foreground);
    puts(message);
    return 0;
}
.fi

.SH NOTES

.TP
.IP \\[bu]
A custom color must be reset before the end of your program to avoid conflicts with the current shell session.

.TP
.IP \\[bu]
A custom background color may be badly rendered when outputting the newline character while the terminal screen scrolls down on overflow. Always reset the background color before outputting that character.

.TP
.IP \\[bu]
These functions cache ANSI escape sequences in the standard output buffer if the standard output stream is a TTY.

Before writting to the standard error stream, ensure to flush the standard output buffer by using \fBfflush\fR(3) for them to be used.

.TP
.IP \\[bu]
No color is set if the standard output and error streams are being redirected/piped or are wide character oriented.

.SH SEE ALSO

.BR fflush (3),
.BR puts (3),
.BR tdk (3)

.TH tdk_getCursorPosition 3 "${LIBRARY_VERSION}" "${LIBRARY_PACKAGE}"

.SH NAME

.PP
tdk_getCursorPosition - it gets the terminal cursor position.

.SH LIBRARY

.PP
tdk (\fIlibtdk\fR, \fI-ltdk\fR)

.SH SYNOPSIS

.PP
\fBint\fR tdk_getCursorPosition(\fBint\fR *\fIcolumn\fR, \fBint\fR *\fIline\fR);

.SH DESCRIPTION

.PP
It gets the terminal cursor column and line positions and puts those values
inside of the addresses pointed by the parameters \fIcolumn\fR and \fIline\fR
respectively.

.PP
If a value is not required, its address can be set to NULL.

.PP
It considers an origin position, where position is (column = 0, line = 0), at
the top left corner of the screen, increasing those values going right and down
respectively.

.PP
As it receives those values from the stdin stream, its buffer will always be
cleared after a successful call.

.SH RETURN VALUES

.PP
It returns 0 if the position was got and the values were set, and 1 otherwise.
It fails if:

.IP \[bu]
The stdin stream is being redirected or it is not oriented to wide characters.

.IP \[bu]
The stdout and stderr streams are being redirected or they are not oriented to
single-byte characters.

.SH EXAMPLES

.nf
\fB#include\fR <tdk.h>

\fBint\fR main(\fBvoid\fR) {
  /* It allocates the necessary memory. */
  \fBint\fR column;
  \fBint\fR line;
  /* It gets the cursor position. */
  tdk_getCursorPosition(&column, &line);
  /* It writes the cursor position got. */
  printf("----- Cursor Position -----\\n");
  printf(":: Column : %d.\\n", column);
  printf(":: Line   : %d.\\n", line);
  printf("---------------------------\\n");
  return 0;
}
.fi

.SH SEE ALSO

.BR tdk (3)

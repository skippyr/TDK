.TH tdk_readKeyEvent 3 ${VERSION}

.SH NAME

.PP
tdk_readKeyEvent - reads and parses key events

.SH LIBRARY

.PP
tdk (\fIlibtdk\fR, \fI-tdk\fR)

.SH SYNOPSIS

.nf
\fB#include <tdk.h>

int tdk_readKeyEvent(int *\fIkey\fB, int *\fImodifiers\fB);\fR
.fi

.SH DESCRIPTION

.PP
Reads characters from the standard input buffer and parses key events. All information retrieved gets into the addresses pointed by its parameters, if successfull:

.TP
.IP \\[bu]
\fBkey:\fR receives the key pressed during the event. It may be an UTF-8 grapheme or a custom value defined by the library.

.TP
.IP \\[bu]
\fBmodifiers:\fR receives a bitmask containing the modifier keys being hold during the event. It may be composed by custom values defined by the library.

.PP
Both parameters are optional. If one is not required, use NULL.

.SH RETURN VALUES

.PP
It returns 0 on success, and -1 on failure. It fails if:

.TP
.IP \\[bu]
The standard input stream is being redirected/piped or is wide character oriented.

.TP
.IP \\[bu]
The standard output and error streams are being redirected/piped.

.SH KEYS

.PP
These are custom key values defined by the library that may be set into the \fIkey\fR parameter.

.PP
They identify keys that are not represented by UTF-8 characters and some others that are but which value can be used to improve readability.

.TP
.B tdk_Key_UpArrow, tdk_Key_DownArrow, tdk_Key_RightArrow, tdk_Key_LeftArrow
The arrow keys.

.TP
.B tdk_Key_F1, tdk_Key_F2, tdk_Key_F3, tdk_Key_F4, tdk_Key_F5, tdk_Key_F6, tdk_Key_F7, tdk_Key_F8, tdk_Key_F9, tdk_Key_F10, tdk_Key_F11, tdk_Key_F12
The function keys.

.TP
.B tdk_Key_Home, tdk_Key_End, tdk_Key_PageUp, tdk_Key_PageDown, tdk_Key_Escape
The navigation keys.

.TP
.B tdk_Key_Insert, tdk_Key_Delete, tdk_Key_Enter, tdk_Key_Space, tdk_Key_Backspace, tdk_Key_Tab
The insertion/deletion keys.

.SH MODIFIERS

.PP
These are custom modifier key values defined by the library that may be used to compose the bitmask set into the \fImodifiers\fR parameter.

.TP
.B tdk_Modifier_Alt
Checks if the Alt key was being hold during the event.

.TP
.B tdk_Modifier_Ctrl
Checks if the Ctrl key was being hold during the event.

.PP
The Shift key can only be identified by checking the key read as it usually changes it. For example: when Shift is used, characters turn into uppercase.

.PP
As a limitation of this library, modifier keys can only be identified in keys represented by UTF-8 graphemes.

.SH EXAMPLES

.nf
#include <stdio.h>

#include <tdk.h>

int main(void) {
  int key;
  int modifiers;
  tdk_readKeyEvent(&key, &modifiers);
  if (key == 'a' && modifiers & tdk_Modifier_Ctrl &&
      !(modifiers & tdk_Modifier_Alt)) {
    puts("Ctrl + A");
  } else if (key >= tdk_Key_F1 && key <= tdk_Key_F12) {
    puts("F1 to F12");
  } else if (key == tdk_Key_UpArrow) {
    puts("Up Arrow");
  } else if (key == *(int *)"🐉") {
    puts("Dragon Emoji");
  }
  return 0;
}
.fi

.SH NOTES

.TP
.IP \\[bu]
In case of content pasting into the terminal, this function may leave unread contents inside of the standard input buffer for future readings. If you need to clear it, use \fBtdk_clearInputBuffer\fR(3).

.TP
.IP \\[bu]
Terminals, desktop environments and operating systems may reserve key sequences to their own usage, making them unreadable by this function.

.TP
.IP \\[bu]
In some situations, terminals may not give enough information about the key event for the library to identify key and modifiers precisely.

One example happens with the Ctrl + i and Ctrl + j sequences that have the same value as \fItdk_Key_Tab\fR and \fItdk_Key_Enter\fR, respectively.

.SH SEE ALSO

.BR puts (3),
.BR tdk (3),
.BR tdk_clearInputBuffer (3)

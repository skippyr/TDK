.TH tdk_readkey 3 ${VERSION}

.SH NAME

.PP
tdk_readkey - reads and parse key events

.SH LIBRARY

.PP
tdk (\fIlibtdk\fR, \fI-tdk\fR)

.SH SYNOPSIS

.nf
\fB#include <tdk.h>

int tdk_readkey(int *\fIkey\fB, int *\fImods\fB);\fR
.fi

.SH DESCRIPTION

.PP
It reads characters from the standard input buffer and parses key events.

.TP
.IP \\[bu]
The key pressed is set into the \fIkey\fR parameter. It can be an UTF-8 grapheme or a value defined by the library.

.TP
.IP \\[bu]
A bitmask containing the modifier keys being hold during the event is set into the address pointed by the \fImods\fR parameter.

.PP
Both parameters are only set if this function succeeds.

.SH RETURN VALUES

.PP
It returns 0 on success, and -1 on failure. It fails if:

.TP
.IP \\[bu]
The standard input stream is being redirected/piped or is wide character oriented.

.TP
.IP \\[bu]
The standard output and error streams are being redirected/piped.

.SH KEYS

.PP
These are key values defined by the library that may be set into the address pointed by the \fIkey\fR parameter.

.PP
They identify keys that are not represented by UTF-8 characters and some others that are but which value can be used to improve readability.

.TP
.B TDK_KEYUARW, TDK_KEYDARW, TDK_KEYRARW, TDK_KEYLARW
The arrow keys.

.TP
.B TDK_KEYF1, TDK_KEYF2, TDK_KEYF3, TDK_KEYF4, TDK_KEYF5, TDK_KEYF6, TDK_KEYF7, TDK_KEYF8, TDK_KEYF9, TDK_KEYF10, TDK_KEYF11, TDK_KEYF12
The function keys.

.TP
.B TDK_KEYHOME, TDK_KEYEND, TDK_KEYPGUP, TDK_KEYPGDN, TDK_KEYESC
The navigation keys.

.TP
.B TDK_KEYINS, TDK_KEYDEL, TDK_KEYRET, TDK_KEYSPC, TDK_KEYBSPC, TDK_KEYTAB
The insertion/deletion keys.

.SH MODIFIERS

.PP
These are modifier key values defined by the library that may be used to compose the bitmask set into the address pointed by the \fImods\fR parameter.

.TP
.B TDK_MODALT
Checks if the Alt key was being hold during the event.

.TP
.B TDK_MODCTRL
Checks if the Ctrl key was being hold during the event.

.PP
The Shift key can only be identified by checking the key read as it usually changes it. For example: when Shift is used, characters turn into uppercase.

.PP
As a limitation of this library, modifier keys can only be identified in keys represented by UTF-8 graphemes.

.SH EXAMPLES

.nf
#include <stdio.h>

#include <tdk.h>

int
main(void)
{
    int key;
    int mods;
    tdk_readkey(&key, &mods);
    if (key == 'a' && mods & TDK_MODCTRL && !(mods & TDK_MODALT))
        puts("Ctrl + A");
    else if (key >= TDK_KEYF1 && key <= TDK_KEYF12)
        puts("F1 to F12");
    else if (key == TDK_KEYUARW)
        puts("Up Arrow");
    else if (key == *(int *)"🐉")
        puts("Dragon Emoji");
    return 0;
}
.fi

.SH NOTES

.TP
.IP \\[bu]
In case of content pasting into the terminal, this function may leave unread contents inside of the standard input buffer for future readings. If you need to clear it, use \fBtdk_clearin\fR(3).

.TP
.IP \\[bu]
Terminals, desktop environments and operating systems may reserve key sequences to their own usage, making them unreadable by this function.

.TP
.IP \\[bu]
In some situations, terminals may not give enough information about the key event for the library to identify key and modifiers precisely.

One example happens with the Ctrl + i and Ctrl + j sequences that have the same value as \fITDK_KEYTAB\fR and \fITDK_KEYRET\fR, respecitvely.

.SH SEE ALSO

.BR puts (3),
.BR tdk (3),
.BR tdk_clearin (3)

.TH tdk_getCursorCoordinate 3 ${VERSION}

.SH NAME

.PP
tdk_getCursorCoordinate, tdk_setCursorCoordinate - gets/sets the terminal cursor coordinate

.SH LIBRARY

.PP
tdk (\fIlibtdk\fR, \fI-tdk\fR)

.SH SYNOPSIS

.nf
\fB#include <tdk.h>

int tdk_getCursorCoordinate(unsigned short *\fIcolumn\fB, unsigned short *\fIrow\fB);
void tdk_setCursorCoordinate(unsigned short \fIcolumn\fB, unsigned short \fIrow\fB);\fR
.fi

.SH DESCRIPTION

.TP
.IP \\[bu]
The function \fBtdk_getCursorCoordinate\fR gets the column and row components of the terminal cursor coordinate and puts that information inside of the addresses pointed by the \fIcolumn\fR and \fIrow\fR parameters, respectively, if successful.

Both parameters are optional. If one is not required, use NULL.

.TP
.IP \\[bu]
The function \fBtdk_setCursorCoordinate\fR sets the \fIcolumn\fR and \fIrow\fR components of the terminal cursor coordinate.

The coordinate given will always be fit within the terminal window boundaries. If you need, use \fBtdk_getWindowDimensions\fR(3) to retrieve the terminal window dimensions and use that information to handle possible exceptions and make precise/relative positioning.

.PP
Both functions use a reference point at the top left corner of the terminal window, where both column and row components of the coordinate are zero. From there, those components increase going right and down, respectively.

.SH RETURN VALUES

.PP
The function \fBtdk_getCursorCoordinate\fR returns 0 on success, and -1 on failure. It fails if:

.TP
.IP \\[bu]
The standard input stream or the standard output and error streams are being redirected/piped or are wide character oriented.

.SH EXAMPLES

.nf
#include <stdio.h>

#include <tdk.h>

int main(void) {
  unsigned short cursorColumn;
  unsigned short cursorRow;
  tdk_getCursorCoordinate(&cursorColumn, &cursorRow);
  tdk_setCursorCoordinate(cursorColumn + 5, cursorRow);
  puts("Here Be Dragons!");
  return 0;
}
.fi

.SH NOTES

.TP
.IP \\[bu]
As the function \fBtdk_getCursorCoordinate\fR reads a terminal answer given through the standard input buffer, it will always clear that buffer during its call.

.TP
.IP \\[bu]
The function \fBtdk_setCursorCoordinate\fR caches ANSI escape sequences in the standard output buffer if the standard output stream is a TTY.

Before writting to the standard error stream, ensure to flush the standard output buffer by using \fBfflush\fR(3) for them to be used.

.TP
.IP \\[bu]
The cursor position is not set by \fBtdk_setCursorCoordinate\fR if the standard output and error streams are being redirected/piped or are wide character oriented.

.SH SEE ALSO

.BR fflush (3),
.BR puts (3),
.BR tdk (3),
.BR tdk_getWindowDimensions (3)
